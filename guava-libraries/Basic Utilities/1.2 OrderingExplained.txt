 OrderingExplained  
Guava's fluent comparator class, Ordering, explained.
explained
Updated Mar 20, 2012 by wasserman.louis
Example

Ordering<String> byLengthOrdering = new Ordering<String>() {
     public int compare(String left, String right) {
       return Ints.compare(left.length(), right.length());
     }
   };

if (Ordering.from(comparator).reverse().isOrdered(list)) { ... }

Overview

Ordering is Guava's "fluent" Comparator class, which can be used to manipulate, extend, and make use of comparators.

Besides just manipulating the Ordering itself, support is provided for manipulating collections and other objects with the ordering as well.
Creation

Common orderings are provided by static methods:

Method 	Description
natural() 	Uses the natural ordering on Comparable types.
usingToString() 	Compares Objects by the lexicographical ordering of their string representations, as returned by toString().
arbitrary() 	Returns an arbitrary ordering over all objects, for which compare(a, b) == 0 implies a == b (identity equality). There is no meaning whatsoever to the order imposed, but it is constant for the life of the VM.

Making a preexisting Comparator into an Ordering is as simple as using Ordering.from(Comparator). This method can be used freely, as it is smart enough to recognize when the Comparator argument is already an Ordering.

Alternately, the Comparator may be skipped entirely, just extending the Ordering abstract class directly, as in the example:

Ordering<String> byLengthOrdering = new Ordering<String>() {
     public int compare(String left, String right) {
       return Ints.compare(left.length(), right.length());
     }
   };

Manipulation

A given Ordering can be modified to obtain many other useful derived orderings. Some of the most commonly used variations include:

Method 	Description
reverse() 	Returns the reverse ordering.
nullsFirst() 	Returns an Ordering that orders nulls before non-null elements, and otherwise behaves the same as the original Ordering. See also nullsLast().
compound(Comparator) 	Returns an Ordering which uses the specified Comparator to "break ties."
lexicographical() 	Returns an Ordering that orders iterables lexicographically by their elements.
onResultOf(Function) 	Returns an Ordering which orders values by applying the function to them and then comparing the results using the original Ordering.

For example, let's say you want to have a comparator for the class

class Foo {
  @Nullable String sortedBy;
  int notSortedBy;
}

that can deal with null values of sortedBy. This can be done in a few ways, most simply:

Ordering<Foo> ordering = Ordering.natural().nullsFirst().onResultOf(new Function<Foo, String>() {
    public String apply(Foo foo) {
      return foo.sortedBy;
    }
  });

Application

Guava provides a number of methods to manipulate or examine values or collections using the ordering. We list some of the most popular here.

Method 	Description 	See also
greatestOf(Iterable iterable, int k) 	Returns the k greatest elements of the specified iterable, according to this ordering, in order from greatest to least. Not necessarily stable. 	leastOf
isOrdered(Iterable) 	Tests if the specified Iterable is in nondecreasing order according to this ordering. 	isStrictlyOrdered
sortedCopy(Iterable) 	Returns a sorted copy of the specified elements as a List. 	immutableSortedCopy
min(E, E) 	Returns the minimum of its two arguments according to this ordering. If the values compare as equal, the first argument is returned. 	max(E, E)
min(E, E, E, E...) 	Returns the minimum of its arguments according to this ordering. If there are multiple least values, the first is returned. 	max(E, E, E, E...)
min(Iterable) 	Returns the minimum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty. 	max(Iterable), min(Iterator), max(Iterator)

