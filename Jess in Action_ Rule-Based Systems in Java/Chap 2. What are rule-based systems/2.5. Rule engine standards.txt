2.5. Rule engine standards
Various commercial off-the-shelf products (other than application servers) can be designed to work together with rule engines. Historically, there has been a certain amount of vendor lock-in, because each rule engine has its own programmer¡¯s interface. The Java Rule Engine API (http://www.jcp.org/jsr/detail/94.jsp), defined by the javax.rules package, is a standard enterprise API for accessing rule engines, currently being developed by a consortium of rule engine vendors under the Java Community Process. The javax.rules package will allow the host program to interact generically with multiple rule engines, the same way the Java Database Connectivity (JDBC) API makes it possible to write vendor-neutral database programs. The API will include mechanisms for creating and managing sets of rules; for adding, removing, and modifying objects in working memory; and for initializing, resetting, and running the engine. Soon (perhaps even by the time you read this), most popular rule engines, including Jess, will be accessible using the javax.rules API. In fact, the official reference implementation of the javax.rules API is currently slated to be a driver for Jess.

The javax.rules API will not specify a standard rule language, however. Other groups are working on developing standardized rule languages,[5] although less consensus exists in this area. For the same reason there is no one standard general programming language, it is likely that vendor-specific rule languages will be with us for a long time. Each rule language has its own strengths and weaknesses, and the expressiveness, elegance, and power of a rule language can be a major factor in choosing an engine.

[5] See, for example, http://www.dfki.uni-kl.dc/ruleml/.

