4. Getting started with the Jess language
In this chapter you¡¯ll...

Learn the basic syntax of Jess

Work with basic Jess control structures

Find out how to define functions in Jess

This chapter is an introduction to the Jess rule language. It will not teach you how to write rules¡ªthat will have to wait for chapter 7¡ªbut it will explain how to write code in the Jess rule language, and you¡¯ll need this ability to write the right-hand sides of rules. The Jess rule language is also a general-purpose programming language, and you can use it even without writing any rules.

The next few chapters contain syntax diagrams to concisely describe the syntax of some of the more complicated expressions. In these diagrams:

Text in <angle-brackets> is a description of some kind of data that you must supply.

Things ending with + can appear one or more times.

Things ending with * can appear zero or more times.

Things in [square brackets] are optional. Square brackets are also used to group expressions together, so that one of the repeating operators can be applied to a group.

4.1. The basics

Just as books are made up of words, code is made up of tokens. A token is a sequence of characters that a computer language recognizes as a fundamental unit. Jess understands only a few different kinds of tokens: symbols, numbers, strings, and comments. Once you know about these, you can begin to do some programming.

4.1.1. Whitespace

Input to Jess is free-form. Newlines and whitespace are not significant except inside quoted strings. You can use newlines and indentation to highlight the structure of the code you write, just as in Java; for example, the following code

(if (< ?x 3) then (printout t "?x is less than three" crlf))

would usually be written

if (< ?x 3) then
    (printout t "?x is less than three" crlf))

4.1.2. Symbols

The symbol is a core concept of the Jess language. Symbols are tokens that are very much like identifiers in Java. A Jess symbol can contain letters, numbers, and the following punctuation marks: $, *, ., =, +, /, <, >, _, ?, and #. A symbol may not begin with a number. Some of the punctuation marks ($, ?, and =) cannot be used as the first character of a symbol, but can appear in other positions. The other punctuation marks listed can appear as the first character or any character of a symbol. Jess symbols are case sensitive: foo, FOO, and Foo are all different symbols. The best symbols consist of letters, numbers, underscores, and hyphens; hyphens are traditional word separators. The following are all valid symbols:

foo   first-value   contestant#1   _abc

Jess gives special meaning to a few symbols; they are like Java keywords. The symbol nil is like null in Java, and TRUE and FALSE are Jess¡¯s Boolean values. Note that case is significant: TRUE and FALSE must be uppercase, and nil must be lowercase. Other symbols have special meanings only in certain contexts; for example, the symbol crlf is translated into a newline when printed.

4.1.3. The jess.Value class

Internally, all Jess values¡ªsymbols, numbers, strings, and others¡ªare represented by instances of the jess.Value Java class. You will work extensively with this class when you interface Jess and Java code. jess.Value objects are immutable¡ªonce one is created, the value it represents cannot be changed. Every jess.Value object knows the type of the datum it holds, and you can fetch this type using the type() member function. The possible values are enumerated by a set of constants in the jess.RU class (RU stands for Rete Utilities). Symbols are of type RU.ATOM.

4.1.4. Numbers

Jess¡¯s parser uses the Java parsing functions java.lang.Integer.parseInt and java.lang.Double.parseDouble to parse integer and floating-point numbers, respectively. (See the Java API documentation for those methods for a precise syntax description.) The following are all valid numbers:

3    4.   5.643    6.0E4    1D

The Jess language has three numeric types: RU.INTEGER (corresponding to Java int), RU.FLOAT (corresponding to Java double), and RU.LONG (like the Java type long). The type of a numeric value is inferred when it is parsed. The type RU.LONG isn¡¯t used much; in fact, you can¡¯t type a long literal in Jess. We¡¯ll talk about a function that turns a string into an RU.LONG value after we¡¯ve discussed functions and strings.

4.1.5. Strings

Character strings in Jess are denoted using double quotes ("). Typical strings look like this:

"foo"
"Hello, World"

You can use backslashes (\) to escape embedded quote symbols, just like in Java:

"\"Nonsense,\" he said firmly."

Jess strings do not recognize any other Java-style escape sequences. In particular, you cannot embed a newline in a string using \n. On the other hand, real newlines are allowed inside double-quoted strings; they become part of the string. This Jess string is equivalent to the Java string "Hello,\nThere".

"Hello,
There"

Strings are represented as jess.Value objects of type RU.STRING.

4.1.6. Comments

You can add descriptive comments to your Jess code. Programmer¡¯s comments in Jess begin with a semicolon (;) and extend to the end of the line of text. Here is an example of a comment:

; This is a number
1.2345

Comments can appear anywhere in a Jess program; they are simply ignored.

Note that Jess comments can nest¡ªa semicolon can appear in a comment without trouble. Many Jess programmers use multiple semicolons on a line for visual emphasis:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Rules added 2/3/2003
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Although you¡¯ll see this usage often in Jess code, it has no special meaning.

Whitespace, symbols, numbers, strings, and comments are the fundamental elements of Jess syntax. Now you¡¯re ready to learn how to put these elements together into code.

