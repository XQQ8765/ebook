8.1. Review of the problem

Before looking at Jess¡¯s implementation, let¡¯s review the problem Jess is meant to solve. Jess is a shell for rule-based systems. In the simplest terms, this means Jess¡¯s purpose is to continuously apply a set of if...then statements (rules) to a set of data (the working memory). Each system built from the shell defines its own rules. Jess rules look like this:

(defrule library-rule-1
    (book (name ?x) (status late) (borrower ?y))
    (borrower (name ?y) (address ?z))
    =>
    (send-late-notice ?x ?y ?z))

This rule might be translated into pseudo-English as follows:

Library rule #1:
IF
    A late book X exists, borrowed by a person Y
AND That borrower's address is known to be Z
THEN
    Send a late notice to Y at Z about the book X.
END

The information about books and borrowers would be found in the working memory, which is therefore a kind of database of bits of factual knowledge about the world. Entities like books and borrowers are called facts. Facts have attributes called slots, like a name, a status, and so on. Each kind of fact can have only a fixed set of slots. The allowed slots for a given type are defined in Jess statements called deftemplates. Actions like send-late-notice can be defined in user-written functions in the Jess language (deffunctions) or in Java (see chapter 15). For more information about rule syntax, you can refer to chapter 7.

Therefore, the main problem Jess must solve is that of matching the rules in the rule base to the facts in working memory. Jess has to perform the following steps in an infinite loop:

1.
Find all the rules that are satisfied by a set of facts in working memory.

2.
Form activation records out of these rule/fact associations.

3.
Choose one activation record to execute.


