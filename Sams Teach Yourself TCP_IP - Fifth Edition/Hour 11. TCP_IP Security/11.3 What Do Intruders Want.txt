What Do Intruders Want?
As the preceding section mentioned, network attackers approach their craft from a number of motivations. Their goals might differ, but they all have the goal of gaining power and control of a computer system or network. Many of their intermediate steps are therefore the same.

The computer attack and infiltration process is organized around the following steps:

Get access to the system.

Get privileges.

Get comfortable.

Get ready for the next attack.

It is also worth noting that for coordinated and well-organized attacks on computer networks a separate reconnaissance phase often precedes these steps.

Attackers have several methods for gaining entry and getting comfortable, and although it isn¡¯t possible to describe them all, it is possible to classify these techniques into three basic categories:

Credential attacks: These attacks focus on getting credentials to log in to the system normally. In essence, the attack takes place before the intruder even infiltrates the security system. A variation of this technique is privilege escalation, in which the attacker gains low-level access and then works to attain higher privilege levels.

Network-level attacks: The attacker slips in by finding an open port, unsecured service, or gap in the firewall. Other network-level attack techniques exploit nuances of the TCP/IP protocol system to gain information or reroute connections.

Application-level attacks: The attacker exploits known flaws in the program code of an application running on the system, such as a web server, tricking the application into executing arbitrary commands or otherwise behaving in a way the programmer never intended.

A full-scale network intrusion often uses a combination of these attack techniques. In a typical scenario, an attacker might use an application-level attack for the initial breach, then escalate privileges to administrator-level status, and then open a hidden back door for unlimited access through the system.

A back door is a means for the intruder to log in to the system undetected. Intruders use many different kinds of back doors. As you learn later in this hour, the intruder often attempts to install a rootkit to gain a foothold on the system and then cover up the intrusion. But system access isn¡¯t the only goal of the intruder. Another powerful attack technique that doesn¡¯t result in system access but is, nevertheless, damaging and disruptive is the so-called denial-of-service attack, in which the attacker causes a crash or system overload, so the system can¡¯t function normally. You learn more about denial-of-service attacks later in this hour.

A full-scale attack on a corporate network begins with a broad sweep to determine as much information as possible about the company. This process is sometimes called footprinting. Some of this information can be collected over the Web: company locations, email addresses, and affiliations, and links to other websites. The intruder attempts to obtain any and all domain names used by the company. The domain names are then used to query domain name system (DNS) servers for company IP addresses.

Network security scanners such as Nmap scan the perimeter of the network, looking for open ports or other potential attack vectors. (One of the great ironies of the security business is that IT pros and network intruders use the same tools. Admins often scan their own networks with Nmap just to find any problems before the intruders find them.)

On modern networks, the first step is often to find a service running on an open port, such as a web server, and to exploit a flaw in the service through an application-level attack. A good intruder, however, varies the attack based on the situation. The following sections study some of the tools in the attacker¡¯s toolbox.

Credential Attacks
The classic way to gain access to a computer system is to find out the password and log in. An intruder who gains interactive entry to a system can employ other techniques to build system privileges. Therefore, finding a password¡ªany password¡ªis often the first step in cracking a network. Methods for getting passwords range from high tech (password-cracking dictionary scripts and deencryption programs) to extremely low tech (digging around in trash cans and peeking in users¡¯ desk drawers). Some common password attack methods include

Looking outside the box

Trojan horses

Guessing

Intercepting

The following sections discuss these methods for clandestinely obtaining user passwords.

Looking Outside the Box

No matter how secure your system is, your network won¡¯t be safe unless users protect their passwords. A major source of password compromise is the inattentiveness of users. The earliest intruders often obtained passwords by looking for clues in discarded computer printouts. Since that time, operating system vendors thankfully have become more sophisticated about protecting password information. However, a significant percentage of password-compromise cases still result from offline detection. Users tell their passwords to other users or write down their passwords in some easily accessible place. The physical security of a workplace often is far less rigid than network security. Janitorial staff, disgruntled co-workers, or even unauthorized outsiders are often free to slip into the office unsupervised and look for password clues. When a worker quits or is dismissed, the worker¡¯s account is deactivated, but what about other user accounts belonging to users who have shared their passwords with the former employee?

Some experienced intruders are skilled at getting users to reveal their passwords or getting network admins to tell them passwords. They¡¯ll call the help desk, act a little lost, and say, ¡°Uh, I forgot my password.¡± This sounds silly, but it saves the intruder a lot of effort, and it is often the first thing he tries. Every organization should clearly instruct computer professionals not to reveal password information to any user without taking precautions to ensure that the request is legitimate.

As you learn later in this hour, the ultimate goal of the intruder is to achieve administrative-level privileges. Every password should be protected, because any access can often lead to administrative access, but it is especially important to protect administrative accounts from compromise. The administrative username is another line of defense against intrusion that should also be protected. Most computer systems come with a well-documented and well-known default administrative account. An intruder who is familiar with the operating system has a head start in gaining administrative privileges with knowledge of the username of the administrative account. Experts therefore recommend changing the username of the administrative account.

Trojan Horses

A common tool of computer intruders is the so-called Trojan horse. In general, a Trojan horse is a computer program that purports to do one thing but actually takes other unseen and malicious actions behind the scenes. One early form of the Trojan horse was a fake login screen. The screen looks just like the login screen used for the system, but when the user attempts to log in, the username and password are captured and stored in some secret location accessible to the intruder (see Figure 11.7).

Figure 11.7. Stealing passwords with a Trojan horse login program.




As you might guess, this technique for stealing passwords is designed for a public setting such as a computer lab in which multiple users might use a common set of terminals or workstations. In recent years, operating systems have become more proficient at preventing or detecting this form of password capture.

By the Way: So Many Trojans

Not all Trojan horses capture passwords, and not all password Trojans are as blatant as the example described in this section. Many other types of Trojan horse programs are available on the Internet. Some take the form of games or false system utilities. Many of these Trojan horse programs are distributed as freeware or shareware over the Internet. The best defense against this kind of attack is to be careful what you download. Before you download and install a free utility, read the project documentation and search the Internet for any security warnings. Or to paraphrase an earlier warning about a particularly virulent Trojan that showed up around 800 B.C., ¡°Beware of geeks bearing gifts.¡±


Guessing

Some passwords are so simple or poorly formed that they can easily be guessed by the intruder. You would be surprised how many users use a password that is the same as their username. Some users use a street name, a maiden name, or the name of a child for a password, and some use easily guessable character combinations, such as 123456, abcde, or zzzzzz.

An intruder who knows a little about the user can often guess bad passwords the user might choose. In fact, the intruder doesn¡¯t even have to guess anymore, because tools now exist that automate the process of guessing passwords. The attack tools guess through a list of obvious character combinations. Some tools even use a dictionary to guess every possible word or name in the language. This might require thousands of attempts, but computers can guess quickly.

Intercepting

Packet sniffers and other tools that monitor network traffic can easily capture passwords transmitted over the network in clear text (unencrypted) form. Many classic TCP/IP utilities such as Telnet and the r* utilities or SNMP (see Hour 15, ¡°Monitoring and Remote Access¡±) were designed to transmit passwords in clear text form. Some later versions of these utilities offer password encryption or operate through secure channels. In their basic form, however, the clear text password security of these applications makes them hopelessly ill-suited for an open and hostile environment such as the Internet.

By the Way: No Safe Networks

Even in a closed environment such as a corporate network, clear text passwords are not really safe. Some experts estimate that one corporate employee in a hundred is actively engaged in trying to thwart network security. Although 1% is a small fraction, when you consider a network with 1,000 users that 1% amounts to 10 users who would love to get their hands on someone else¡¯s clear text password.


Several methods exist for encrypting passwords. These password-encryption methods are much better than the clear text option, but password encryption still has some limitations. Tools such as the LC5 and John the Ripper can decrypt encrypted passwords using dictionary and brute-force techniques.

Attackers operating on the Internet can intercept packets that contain encrypted passwords and uncover the passwords using these password-recovery utilities. Recent developments in encrypted channel technologies, such as Secure Sockets Layer (SSL) and IP Security (IPsec) raise the bar considerably higher for intruders who want to eavesdrop on TCP/IP to obtain sensitive information such as passwords.

An attacker who has gained initial access to the system has a variety of options for intercepting or discovering other system passwords (including administrative passwords). Some tools allow the intruder to capture and log the keystrokes of a user typing a password at the keyboard. The attacker also might obtain access to an encrypted system file with password information and analyze the file offline using standard password attack techniques to uncover passwords.

What to Do About Credential Attacks

The best defense against credential attacks is eternal vigilance. Networks have employed a number of strategies for reducing the incidence of password compromise. A few of the more obvious guidelines are as follows:

Provide a good, clear password policy for the users in your organization. Warn them about the danger of telling their password to other users, writing their password down on a sticky note by their desk, or even storing their password in a file.

Configure all computer systems to support mandatory password policies. Set a minimum length for passwords (usually 6 to 8 characters). Don¡¯t let a user use the name of a dog or the name of a child as a password. In fact, passwords should not consist of any standard word, phrase, or name. All passwords should contain a combination of letters and numbers and at least one nonalphanumeric character that is not the first or last character. To prevent password-guessing attacks, make sure the computer is configured to disable the account after a predefined number of failed logon attempts.

Make sure that passwords are never transmitted over public lines in clear text form. If possible, it is better not to transmit clear text passwords on your internal network either, especially on large networks.

Some systems have methods for controlling the number of passwords that each user must remember. Microsoft networks feature a passwords cache and a unified network logon through the domain security system. UNIX systems offer systems such as Kerberos authentication. These methods are useful for controlling password proliferation in some environments. The downside of these unified logon methods is that an intruder who gets one password has unlocked access to all the user¡¯s resources.

Network-Level Attacks
As you learned in Hour 6, access to network applications is managed through logical channels known as ports operating at the Transport layer of the TCP/IP stack. Attackers often gain access to a system by finding an open port that leads to a network service listening for network connections. In some cases, the service might be running by default without the owner of the system even knowing it. Other times, the service might be misconfigured, or it might allow access through a default or anonymous user account.

Scanning tools such as Nmap and Nessus automate the process of looking for open ports. These scanners are used by both intruders (looking for gaps so that they can gain access) and IT professionals (looking for gaps so that they can plug them and prevent access). Other more-specialized tools search out gaps in specific network protocols and services. In many cases, the mere existence of an open port isn¡¯t enough to get the intruder in, but it provides an opportunity for the attacker to launch an application-level attack to exploit a known vulnerability of the service listening on the port.

Scanners are literally running constantly on the Internet, continually traversing the full range of IP addresses in search of open ports and unprotected services. As you learned earlier in this hour, an important function of a firewall is to lock down access to prevent network scanners from learning information about services operating on the network.

Other network-level attack strategies operate on the open Internet to intercept and subvert TCP/IP traffic. Session hijacking, for instance, is an advanced technique that exploits a vulnerability in the TCP protocol. As you learned in Hour 6, the TCP protocol establishes a session between network hosts. Session hijacking calls for the intruder to eavesdrop on a TCP session and insert packets into the stream that appear to be part of the TCP session. The intruder can use this technique to slip commands into the security context of the original session. One common use of session hijacking is to get the system to reveal or change a password.

Of course, an attacker does not manually compose spoofed TCP segments on-the-fly. Session hijacking requires special tools. One famous tool used for session hijacking is a freeware application called Juggernaut. Juggernaut listens on a local network, maintaining a database of TCP connections. An intruder can monitor TCP traffic to play back the connection history or hijack an active session by injecting arbitrary commands. The best defense against session hijacking and other protocol-based techniques is to secure the session using a virtual private network (VPN) or some other form of encryption communication.

Application-Level Attacks
You might expect that if the software is configured properly and you can keep the passwords out of enemy hands you won¡¯t have any problem with Internet intruders. Unfortunately, the real situation is a bit more complicated. Many programs running on the Internet today were written years ago, before the art of intrusion had even evolved, and they contain some program code that is intrinsically unsecure. Even programs written today are too often written in way too much of a hurry¡ªby programmers with vastly varying reserves of training and expertise. Intruders have developed a number of techniques for exploiting unsecure program code to breach system security.

One popular example of an application-level attack technique is buffer overflow. When a computer receives data over a network connection (or for that matter, even when it receives data from a keyboard), the computer must reserve enough memory space to receive the complete data set. This reception space is called a buffer. If user input overflows the buffer, strange things happen. If the input is not properly managed, the data that overflows the buffer can become resident in the CPU¡¯s execution area, which means that commands sent to the computer through a buffer overflow can actually be executed (see Figure 11.8). The commands execute with the privileges of the application that received the data. Other buffer-overflow attacks capitalize on the fact that some applications run in an elevated security context that can remain active when the application terminates unexpectedly.

Figure 11.8. A buffer-overflow attack overflows the memory space reserved for program input, causing the program to crash, behave strangely, or execute arbitrary code.




To avoid buffer-overflow problems, applications must provide a means for receiving and checking the size of the data before inserting the data into an application buffer. The solutions are largely a matter of good programming practice. Poorly designed applications are especially susceptible to buffer-overflow attacks.

Some popular and famous network applications have buffer-overflow vulnerabilities. Many of these exploits are well known around the Internet, so intruders know exactly how and where to launch an attack. The UNIX-based email server Sendmail is a common target for buffer-overflow attacks. Microsoft¡¯s Internet Information Server (IIS) and other Microsoft products have also been victim to buffer-overflow attacks in recent years. When a vendor discovers a possible buffer-overflow vulnerability, the vendor often releases a patch that fixes the problem. Because of the huge public relations problems caused by public notice of a buffer-overflow vulnerability, vendors have become vigilant about quickly repairing their software when an exploit is discovered. It is not surprising for a vendor to publish a patch within days or even hours of when a security problem is discovered. And good system administrators pay close attention to security alerts from organizations such as the Common Vulnerabilities and Exposures project (http://cve.mitre.org) so that they¡¯ll know when and where to obtain the latest patches for their systems. Organizations such as SANS (http://www.sans.org) also provide email newsletters with information on recent security threats.

Part of the solution to problems like buffer overflow is good programming, not just in vendor-based software but also in the homegrown scripts created by web developers and IT staff. Another part of the solution is to keep your system up to date by installing all patches and updates. Some operating systems let you limit the scope of privileges available to the remote user who is attempting to exploit a buffer overflow. If possible, don¡¯t let network applications run with root or administrative privileges. (In some cases, you might not have a choice.) For applications that require a high privilege level to function, jail or sandbox tools such as the UNIX/Linux tool chroot can create a limited security environment that prevents the intruder from gaining access to the rest of the system.

Root Access
The holy grail of the network intruder is always administrative or root access to the system. A user with root access can execute any command or view any file. When you have root access, you can essentially do whatever you want to do with the system. The term ¡°root¡± comes from the UNIX world, but the concept of a powerful account with the privileges to control the system applies to all vendors and platforms. On Windows networks, this account is known as the Administrator account.

After the intruder is inside, often one of the first tasks is to upload a rootkit. A rootkit is a set of tools used for establishing a more permanent foothold on the system. Some of the tools are used to compromise new systems and new accounts. Other tools are designed to hide the attacker¡¯s presence on the systems. These obfuscation tools might include doctored versions of standard network utilities such as netstat, or applications that remove the trail of the intruder from system log files. Other tools in the rootkit might help the intruder explore the network or intercept more passwords. Some rootkits might actually enable the intruder to alter the operating system itself.

Modern rootkits provide additional features. Key loggers capture and log keyboard entries, waiting for the user to type a password. So-called kernel rootkits run at the highest security level of the operating system itself and are almost impossible to detect using conventional detection techniques.

The intruder sets out to establish one or more back doors to the system¡ªsecret ways of getting in to the system that are difficult for a network administrator to detect. The point of a back door is to enable the intruder to avoid the logging and monitoring processes that surround everyday interactive access. A back door might consist of a hidden account or hidden privileges associated with an account that should have only limited access. In some cases, the back door path might include services such as Telnet mapped to unusual port numbers where the local administrator would not expect to find them.

After the intruder has uploaded the necessary tools and has made provisions to cover the tracks and come back later, the next step is to go about any dastardly business the attacker might have in mind for the network, such as stealing files and credit information or configuring the system as a spambot. Another goal is to start getting ready for the next attack. A careful intruder never likes to leave a trail to home. The preferred method is to launch an attack from a system that has already been compromised. Some attackers operate through a chain of several remote systems. This strategy makes it almost impossible to determine the actual location of the intruder.

Going Phishing
The widespread use of firewalls, encryption techniques, and other security measures has made it more difficult for intruders to simply waltz right onto the network uninvited. The attackers have responded with their own new generation of techniques for foiling these security measures. One important new strategy is to entice the unsuspecting user into launching the attack by offering a fraudulent link, email message, or web page as bait. This type of attack falls under the category of phishing. A phishing attack might consist of an email message that asks the user to log in to an online banking site and update account information but actually leads to a faked web page managed by the attacker.

Phishing attacks often exploit the fact that the text shown with a link is independent of the actual URL. As you learn in Hour 18, ¡°HTTP, HTML, and the World Wide Web,¡± a web developer can specify a hypertext link using syntax such as the following:

<a href="http://www.MyBank.com/">MyBank</a>

In this case, the words MyBank would appear with a link that would lead to a home page at http://www.MyBank.com/. However, what if a morally challenged web developer encoded a link like the following:

<a href="http://www.NOT_MyBank_$$&%%%??!!!.biz/">MyBank</a>

In that case, the link still appears with the label MyBank, but it leads to a different website. If you look carefully, you will sometimes see one of these phishing URLs in the address bar of your web browser or in flyover balloon text when you hover the mouse cursor over the link.

The best strategy is not to click links in unsolicited email messages, and never give up any financial information online unless you initiated the activity yourself and you are pretty sure you know where you are going.

Other more advanced phishing techniques are more difficult to trace and detect. One strategy known as cross-site scripting bypasses browser security using code injection to initiate a nefarious script that isn¡¯t easily traceable to the page the user is viewing.

This technique of inviting the user to initiate the attack has implications beyond the simple trick of linking to fake websites. Devices such as firewalls are primarily intended to stop attacks originating from the outside. By getting the user to initiate the connection, the attacker circumvents many of the protections built into the network security infrastructure (see Figure 11.9). The browser and the firewall have no easy way of knowing this connection is different from any other connection to an external website. When the connection is established, the attacker can employ a number of strategies for compromising security that wouldn¡¯t have been possible if the attack were launched from beyond the firewall. This kind of attack is even immune from Network Address Translation (NAT) (see Hour 12), which assigns the user¡¯s system a presumably nonroutable IP address. The firewall device simply translates the session traffic as it would for any other HTTP connection.

Figure 11.9. A home firewall that blocks connection attempts from the outside is often ineffective if the user initiates the connection to a fraudulent web server.




By the Way: Better Firewalls

The possibility of this kind of user-initiated attack is one reason why security experts don¡¯t place a lot of faith in home style off-the-shelf firewall devices. The experts prefer more sophisticated firewall tools that provider a greater variety of syntax rules and filtering mechanisms.


Denial-of-Service Attacks
A recent craze in Internet intrusion is the denial-of-service (DoS) attack. A DoS attack is almost impossible to stop once it starts because it does not require the attacker to have any particular privileges on the system. The point of a DoS attack is to tie up the system with so many requests that system resources are all consumed and performance degrades. High-profile DoS attacks have been launched against websites of the U.S. government and those associated with major Internet search engines.

The most dangerous DoS attack is the distributed DoS (DDoS) attack. In a distributed DoS attack, the attacker uses several remote computers to direct other remote computers into launching a coordinated attack. Sometimes hundreds or even thousands of computers can participate on an attack against a single IP address.

DoS attacks often use standard TCP/IP connectivity utilities. The famous Smurf attack, for instance, uses the ping utility (see Hour 14, ¡°TCP/IP Utilities¡±) to unleash a flood of ping responses on the victim (see Figure 11.10). The attacker sends a ping request to an entire network through directed broadcast. The source address of the ping is doctored to make it appear that the request is coming from the victim¡¯s IP address. All the computers on the network then simultaneously respond to the ping. The effect of the Smurf attack is that the original ping from the attacker is multiplied into many pings on the amplification network. If the attacker initiates the process on several networks at once, the result is a huge flood of ping responses tying up the victim¡¯s system.

Figure 11.10. A DoS attack.

[View full size image]


What to Do
Professional security experts spend their whole lives figuring out what to do to prevent network attacks. Of course, they work on complex networks with hundreds of nodes and large amounts of Internet exposure. On a smaller scale, a few best practices can increase your chances of defeating many of the techniques discussed in this hour:

Use a properly configured firewall.

Use safe passwords. Strategies differ, but most experts recommend a minimum length of six to eight characters, with a combination of letters, numbers, and punctuation marks ($%^!,).

Don¡¯t share passwords. Don¡¯t write down passwords and leave them in obvious places.

Don¡¯t click suspicious links.

Operate with minimal privileges.

If you run Windows, be sure to have some form of virus protection.

Turn off all services you don¡¯t need.

If you must allow access to your internal network, set up a VPN for encrypted communication.

Use a firewall. Close all ports, and turn off all network services unless you really need them.

Run network services in a sandbox environment so that intrusion won¡¯t lead to privilege escalation.

Use encryption for wireless networks.

Install security updates often.

You still have to keep watching, but these time-honored techniques are a minimum for any conscientious Internet user.

