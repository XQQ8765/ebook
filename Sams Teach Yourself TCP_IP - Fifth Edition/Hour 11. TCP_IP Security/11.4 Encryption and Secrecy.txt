Encryption and Secrecy
It is easy to intercept and read an unprotected packet of data traveling over a public network. In some cases, that data might contain user or password information. In other cases, the data might contain other sensitive information you don¡¯t want anyone else to see, such as credit card numbers or company secrets. The fact is that even if the data isn¡¯t particularly secret, many users are justifiably uncomfortable with the prospect of eavesdroppers listening in on their electronic communication.

The following sections discuss some security methods designed to make the network more secret. Many of these methods use a concept known as encryption. Encryption is the process of systematically altering data to make it unreadable to unauthorized users. Data is encrypted by the sender. The data then travels over the network in coded, unreadable form. The receiving computer then decrypts the data to read it.

In fact, encryption does not require a computer at all. Encryption methods have been around for centuries. As long as people have written secret messages, they have looked for codes or tricks to keep those messages secret. In the computer age, however, encryption has gotten much more sophisticated because of the ease with which computers can manipulate huge, messy numbers. Most computer encryption algorithms result from the manipulation of large prime numbers. The algorithms themselves are intensely mathematical, and I do not exaggerate to say that most of the experts who create and deploy encryption algorithms have graduate degrees in computer science or mathematics.

Encryption is an important foundation of almost all TCP/IP security. The following sections discuss some important encryption concepts. As you read the rest of this hour, it is important to keep in mind that the security infrastructure actually has multiple goals, and security methods must address multiple needs. The beginning of this section discussed the goal of confidentiality (keeping data secret). The security system must also address such needs as

Authentication: Making sure that the data comes from the source to which it is attributed

Integrity: Making sure that data has not been tampered with in transit

Encryption techniques are used to help ensure authentication and integrity as well as confidentiality.

The rest of this hour concentrates on securing the TCP/IP protocols from eavesdropping, interception, and manipulation.

Algorithms and Keys
As you learned in the previous section, encryption is a process for rendering data unreadable to everything and everyone who doesn¡¯t have the secret for unlocking the encryption code. For encryption to work, the two communicating entities must have the following:

A process for making the data unreadable (encryption)

A process for restoring the unreadable data to its original, readable form (decryption)

When programmers first began to write encryption software, they realized they must contend with the following problems:

If every computer used the exact same process for encrypting and decrypting data, the program would not be acceptably secure because any eavesdropper could just obtain a copy of the program and start decrypting messages.

If every computer used a totally different and unrelated process for encrypting and decrypting data, every computer would need a totally different and unrelated program. Each pair of computers that wanted to communicate would need separate software. This would be highly expensive and impossible to manage on large, diverse networks.

Intractable as these problems might seem, the large minds who develop encryption techniques quickly saw a solution. The solution is that the process for encrypting or decrypting the data must be divided into a standard, reproducible part (which is always the same) and a unique part (which forces a secret relationship between the communicating parties).

The standard part of the encryption process is called the encryption algorithm. The encryption algorithm is essentially a set of mathematical steps used to transform the data into its unreadable form. The unique and secret part of the process is called the encryption key. The science of encryption is extremely complex, but for purposes of discussion, you can think of the key as a large number that is used within the algorithm as a variable. The result of the encryption process depends on the value of the key. Therefore, as long as the value of the key is kept secret, unauthorized users will not be able to read the data even if they have the necessary decryption software.

The strangeness and obscurity of good encryption algorithms cannot be overstated. However, the following example illustrates the key and algorithm concepts.

A man does not want his mother to know how much he pays for furniture. He knows his mother is mathematically inclined, and he does not want to risk using a simple factor or multiplier to obscure the true value for fear that she will uncover the pattern. He has arranged with his lover that, if his mother is visiting and asks the cost, he will divide the real cost by a new, spontaneous number, multiply the result by 2, and then add $10. In other words, the man arranges to use the following algorithm:

(real cost) / n ¡Á 2 + $10 = reported cost

The new, spontaneous number (n) is the key. This same algorithm can be used every time the mother visits. The mother will have no way of determining a pattern for obscuring the real cost of the item so long as she does not know the key used in the calculation.

If the man comes home with a chair or table and sees his mother in the yard, he secretly signals a number to his lover (see Figure 11.11). When his mother asks the cost of the piece, he processes the algorithm and uses the number he signaled to his lover as the key. For instance, if the key is 3 and the chair cost is $600, he would report the following:

($600)/3 ¡Á 2 + $10 = $410

Figure 11.11. An extremely primitive algorithm for disguising communication.




The lover, who is aware of the shared secret, knows that she must process the algorithm in reverse to obtain the true cost:

($410 -$10)/2 ¡Á 3 = $600

This simple example, which is intended only as an illustration of the difference between an algorithm and a key, does not reveal the real complexity of computer encryption methods. It is also important to remember that the goal of changing a value is not exactly the same as the goal of making data unreadable. However, in the binary world of computers, this distinction is less pronounced than it might seem.

To a computer, all data takes the form of binary data bits representing 1s and 0s and is, therefore, subject to mathematical manipulation. Any process that transforms the string of data bits into a different string of data bits conceals the nature of the information. The important thing is that the recipient must have some means of working backward through the encrypted data to uncover the original information, and the encryption process must accommodate some form of shared secret value (a key) without which the decryption becomes impossible.

Encryption is at the heart of almost all secure networking techniques. Secure systems encrypt passwords, login procedures, and sometimes entire communication sessions. The encryption process is typically invisible to the user, although the applications and components that manage encryption are often invoked intentionally by the developer or network administrator.

Symmetric (Conventional) Encryption
Symmetric encryption is sometimes called conventional encryption because it preceded the development of newer, asymmetric techniques. Symmetric encryption is still the most common form, although public key asymmetric encryption (discussed later in this hour) has recently received considerable attention.

Symmetric encryption is called symmetric because the encryption and decryption processes use the same key, or at least, keys that are related in some predictable way. Figure 11.12 shows a symmetric encryption/decryption process. The steps are as follows:

1.
A secret key is made known to both the sending and receiving computers.



Figure 11.12. The symmetric encryption process.

[View full size image]


2.
The sending computer encrypts the data using a prearranged encryption algorithm and the secret key.

3.
The encrypted (unreadable) text is delivered to the destination computer.

4.
The receiving computer uses a corresponding decryption algorithm (along with the secret key) to decrypt the data.

The furniture man and his lover (see the example in the preceding section) use a symmetric algorithm to hide the true value of the chair.

Symmetric encryption can be extremely secure if it is performed carefully. The most important considerations for the security of any encryption scheme (symmetric or asymmetric) are as follows:

The strength of the encryption algorithm

The strength of the keys

The secrecy of the keys

Breaking through an encryption algorithm that uses a 128-bit key might seem completely impossible, but it can happen. Key-cracking utilities are freely available on the Internet, and some 128-bit encryption algorithms that were once considered unbreakable are now considered unsecure. Another way to steal encrypted data is to steal the key. The software must provide some secure means for delivering the key to the receiving computer. Various key delivery systems exist, and you learn about some of these systems later in this hour. In the case of symmetric encryption, the secret key is the whole secret. If you capture the key, you have everything. Most systems, therefore, call for a periodic renewal of the key. The unique key used by a pair of communicating computers might be re-created with every session or after a given time interval. Key renewal increases the number of keys crossing the network, which compounds the need for effective key protection.

Several common encryption algorithms make use of symmetric encryption. The Data Encryption Standard (DES) was once a popular option, but its 56-bit key is now considered too short. Modern encryption techniques often allow for a variable key length. A descendent of DES known as the Advanced Encryption Standard (AES) supports keys of 128, 192, or 256 bits. The Blowfish symmetric algorithm provides a key length of up to 448 bits.

Asymmetric (Public Key) Encryption
An alternative encryption method that has emerged over the past 30 years provides an answer to some of the key distribution problems implicit with symmetric encryption. Asymmetric encryption is called asymmetric because the key used to encrypt the data is different from the key used to decrypt the data.

Asymmetric encryption is commonly associated with an encryption method known as public key encryption. In public key encryption, one of the two keys (called the private key) is held securely on a single computer. The other key (the public key) is made available to computers that want to send data to the holder of the private key. The steps are as follows:

1.
Computer A attempts to establish a connection with Computer B.

2.
The encryption software on Computer B generates a private key and a public key. The private key is shared with no one. The public key is made available to Computer A.

3.
Computer A encrypts the data with the public key received from Computer B and transmits the data. The public key from Computer B is stored on Computer A for future reference.

4.
Computer B receives the data and decrypts it using the private key.

By the Way: Confidentiality and Authenticity

It can be argued that although an eavesdropper who intercepts the public key cannot read data sent from Computer A, the eavesdropper can still pretend to be Computer A by encrypting new data and sending it on to Computer B. Therefore, although public key encryption provides confidentiality, it does not necessarily provide authenticity. However, several methods exist for enclosing authentication information within the encrypted data so that when the data is decrypted, Computer B will have some assurance that the data actually came from Computer A. See the sections ¡°Digital Signatures¡± and ¡°Digital Certificates,¡± later in this hour.


An important aspect of public key methods is that the encryption performed through the public key is a one-way function. The public key can be used to encrypt the data, but only the private key can decrypt the data after it is encrypted. An eavesdropper who intercepts the public key will still not be able to read messages encrypted using the public key.

Public key encryption is often used for establishing a secure connection. The data transmitted through public key encryption often includes a symmetric session key that is then used to encrypt the data transmitted within the session.

Public key encryption methods are commonly used for protected Internet transactions. You learn later in this hour about public key certificates, which are used for TCP/IP security protocols such as SSL and IPsec.

Digital Signatures
It is sometimes important to ensure the authenticity of a message even if you don¡¯t care whether the content of the message is confidential. For instance, a stockbroker might receive an email message that says

Sell 20 shares of my Microsoft stock.
-Bennie

Selling 20 shares might be an entirely routine event for this investor. The investor and the broker might not care if the transaction is totally immune from eavesdropping. However, they might consider it extremely important to ensure that this sell notice came from Bennie and not from someone pretending to be Bennie.

A digital signature is a method for ensuring that the data came from the source to which it is attributed and that the data has not been altered along its delivery path.

A digital signature is a block of encrypted data included with a message. The block of encrypted data is sometimes called an authenticator. A digital signature typically uses the public key encryption process in reverse (see Figure 11.13):

1.
Computer B wants to send a document to Computer A that bears a digital signature. Computer B creates a small segment of data with information necessary to verify the contents of the document. In other words, some mathematical calculation is performed on the bits in the document to derive a value. The authenticator might also contain other information useful for verifying the authenticity of the message, such as a time-stamp value or other parameters that associate the authenticator with the message to which it is attached.



Figure 11.13. The digital signature process.

[View full size image]


2.
Computer B encrypts the authenticator using a private key. (Note that this is backward from the public key encryption process described in the preceding section. In the preceding section, the private key decrypts the data.) The authenticator is then affixed to the document, and the document is sent to Computer A.

3.
Computer A receives the data and decrypts the authenticator using Computer B¡¯s public key. The information inside the authenticator lets Computer A verify that the data has not been altered in transit. The fact that the data could be decrypted using Computer B¡¯s public key proves that the data was encrypted using Computer B¡¯s private key, which ensures that the data came from Computer B.

The digital signature thus ensures that the data was not altered and that it came from its presumptive source. As a rudimentary security measure, the entire message could be encrypted with Computer B¡¯s private key rather than just the authenticator. However, encrypting with a private key and decrypting with a public key does not really offer confidentiality, as the public key, which is used for decryption, is sent over the Internet and, therefore, might not be secret. An eavesdropper who has the public key can decrypt the encrypted authenticator. However, the eavesdropper cannot encrypt a new authenticator and, therefore, cannot pretend to be Computer B.

Digital Certificates
The grand design of making the public key available to anyone who requests it is an interesting solution, but it still has some limitations. The fact is, an attacker can still make mischief with the public key. The attacker might be able to decrypt digital signatures (see the preceding section) or even read passwords encrypted with the user¡¯s private key. It is safer to provide some kind of security system for ensuring who gets access to a public key.

One answer to this problem is what is called a digital certificate. A digital certificate is essentially an encrypted copy of the public key. The certificate process is shown in Figure 11.14. This process requires a third-party certificate server that has a secure relationship with both the parties that want to communicate. The certificate server is also called a certificate authority (CA).

Figure 11.14. Authentication using digital certificates.




Several companies provide certificate services for the Internet. One major certificate authority is VeriSign Corp. Some large organizations provide their own certificate services. The certificate process varies among the various vendors. A rough schematic description of the process is as follows:

1.
User B sends a copy of his public key to the certificate server through a secure communication.

2.
The certificate server encrypts User B¡¯s public key (along with other user parameters) using a different key. This newly encrypted package is called the certificate. Included with the certificate is the digital signature of the certificate server.

3.
The certificate server returns the certificate to User B.

4.
User A needs to obtain User B¡¯s public key. Computer A asks Computer B for a copy of User B¡¯s certificate.

5.
Computer A obtains a copy of the key used to encrypt the certificate through a secure communication with the certificate server.

6.
Computer A decrypts the certificate using the key obtained from the certificate server and extracts User B¡¯s public key. Computer A also checks the digital signature of the certificate server (see step 2) to ensure that the certificate is authentic.

The best-known standard for the certification process is the X.509 standard, which is described in several RFCs. X.509 version 3 is described in RFC 2459 and later RFCs. The latest version is RFC 5280.

The digital certificate process is designed to serve a community of users. As you might guess, the security of the process depends on the safe distribution of any keys necessary for communicating with the certificate server. This might seem like simply transferring the problem. (You guarantee safe communication with the remote host by presupposing safe communication with the certificate server.) However, the fact that the protected communication channel is limited to a single certificate server (as opposed to any possible host within the community) makes it much more feasible to impose the overhead of additional safeguards necessary for ensuring a secure exchange.

The certificate process described earlier in this hour conveniently assumes the certificate server assigned to Computer A is the same server that provides certificates for User B. The certificate process might actually require a number of certificate servers spread across a large network. In that case, the process might require a series of communications and certificate exchanges with other certificate servers to reach the server that provided the User B certificate. As RFC 2459 states, ¡°In general, a chain of multiple certificates might be needed, comprising a certificate of the public key owner (the end entity) signed by one CA, and zero or more additional certificates of CAs signed by other CAs. Such chains, called certification paths, are required because a public key user is only initialized with a limited number of assured CA public keys.¡± Luckily, like most of the details related to encryption, this process is built into the software and doesn¡¯t require direct oversight from the user.

The X.509 certificate process is used in some of the TCP/IP security protocols discussed later in this hour, such as SSL and IPsec.

Securing TCP/IP
In recent years, vendors have been busy extending and expanding their TCP/IP implementations to incorporate the security and encryption techniques discussed earlier in this hour. The following sections describe how encryption techniques are integrated into two Internet security protocol systems: SSL/TLS and IPsec.

Other public security protocols are also in development, and some security software vendors have developed their own systems. The following sections are intended to give you an idea of the kind of solutions necessary to incorporate the promise of encryption into the business of a real network.

SSL and TLS

Secure Sockets Layer (SSL) is a collection of TCP/IP security protocols introduced by Netscape for securing web communication. The purpose of SSL is to provide a layer of security between the sockets at the Transport layer (see Hour 6) and the application accessing the network through the sockets. Figure 11.15 shows the position of SSL in the TCP/IP protocol stack. The idea is that, when SSL is active, network services such as FTP and HTTP are protected from attack by the secure SSL protocols. Transport Layer Security (TLS) is a protocol standard originally described in RFC 2246 and last updated with RFC 5246. TLS, which is based on SSL 3.0, is a successor to SSL, and it is the industry standard at this point. However, references to SSL persist in product names as well as in actual software. Following is a brief description of SSL; the TLS protocol is similar.

Figure 11.15. The TCP/IP stack with SSL.




A closer look at the SSL layer reveals two sublayers (see Figure 11.16). The SSL Record Protocol is a standard base for accessing TCP. Above the Record Protocol is a group of SSL-related protocols that perform specific services:

SSL Handshake Protocol: The base protocol used to access TCP

SSL Change Cipher Spec Protocol: Supports changes to encryption suite settings

SSL Alert Protocol: Sends alerts

Figure 11.16. SSL sublayers.




SSL-enabled services operate directly through the SSL Record Protocol. After the connection is established, the SSL Record Protocol provides the encryption and verification necessary to ensure the confidentiality and integrity of the session.

As with other protocol security techniques, the trick is to verify the identity of the participants and securely exchange the keys that will be used for encrypting and decrypting transmissions. SSL uses public key encryption and provides support for digital certificates (described earlier in this hour).

The SSL Handshake Protocol establishes the connection and negotiates any connection settings (including encryption settings).

SSL is used on many websites to establish a secure connection for the exchange of financial information and other sensitive data. A version of the HTTP web protocol with SSL encryption is known as Hypertext Transfer Protocol Secure (HTTPS). Most mainstream browsers are capable of establishing SSL connections with little or no input from the user. One problem with SSL is that because SSL operates above the Transport layer, the applications using the connection must be SSL aware (unless they operate through some kind of compatibility software that is SSL aware). The next section describes an alternative TCP/IP security system (IPsec) that operates at a lower layer and, therefore, hides the details of the security system from the application.

By the Way

SSL and TLS are designed to operate with connection-oriented, TCP connections. Another protocol known as Datagram Transport Protocol Security (DTLS) provides TLS-like security in a way that also supports connectionless communication with UDP. See RFC 4347 for more on DTLS.


IPsec
IP Security (IPsec) is an alternative security protocol system used on TCP/IP networks. IPsec operates inside the TCP/IP protocol stack, beneath the Transport layer. Because the security system is implemented beneath the Transport layer, the applications operating above the Transport layer do not need knowledge of the security system. IPsec is designed to provide support for confidentiality, access control, authentication, and data integrity. IPsec also protects against replay attacks, in which a packet is extracted from the data stream and reused later by the attacker.

IPsec, which is essentially a set of extensions to the IP protocol, is described in several RFCs, starting with RFC 2401 and including RFCs 4301, 4302, and 4303. The RFCs describe IP security extensions for both IPv4 and IPv6. IPsec is built in to the structure of IPv6 protocol system. In IPv4, IPsec is considered an extension, but IPsec support is nevertheless built in to many IPv4 implementations.

IPsec provides the benefit of encryption-based security to any network application, regardless of whether the application is security-aware. However, the protocol stacks of both computers must support IPsec. Because the security is invisible to high-level applications, IPsec is ideal for providing security for network devices such as routers and firewalls. IPsec can operate in either of two modes:

Transport mode provides encryption for the payload of an IP packet. The payload is then enclosed in a normal IP packet for delivery.

Tunnel mode encrypts an entire IP packet. The encrypted packet is then included as the payload in another outer packet.

Tunnel mode is used to build a secure communication tunnel in which all details of the network are hidden. An eavesdropper cannot even read the header to obtain the source IP address. IPsec tunnel mode is often used for VPN products, which are intended to create a totally private communication tunnel across a public network.

IPsec uses a number of encryption algorithms and key distribution techniques. Data is encrypted using conventional encryption algorithms such as AES, RC5, or Blowfish. Authentication and key distribution might employ public key techniques.

VPNs
The problem of remote access has appeared many times in this book. This problem has actually been an important issue throughout the evolution of TCP/IP. How do you connect computers that are not close enough for a LAN-style cable connection? System administrators have always relied on two important methods for remote connections:

Dial-up: A remote user connects through a modem to a dial-up server, which acts as a gateway to the network.

Wide area network (WAN): Two networks are connected through a dedicated leased-line connection through a phone company or Internet provider.

Both these methods also have disadvantages. Dial-up connections are notoriously slow, and they depend on the quality of the phone connection. A WAN connection is also sometimes slow, but more significantly, a WAN is expensive to build and maintain and is not mobile. A WAN connection is not an option for a remote user of uncertain location traveling with a laptop.

One answer to these problems is to connect directly to the remote network over the open Internet. This solution is fast and convenient, but the Internet is so hostile and unsecure that such an option simply is infeasible without providing some way of preventing eavesdropping. Experts began to wonder if there were some way to use the tools of encryption to create a private channel through a public network. The solution to this problem emerged in what we know now as a virtual private network (VPN). A VPN establishes a point-to-point ¡°tunnel¡± across the network through which ordinary TCP/IP traffic can pass securely.

By the Way: VPN Protocols

Whereas IPsec (described earlier in this hour) is a protocol that supports secure network connections, a VPN is the connection itself. A VPN application is a program that creates and sustains these private remote connections. Some VPN tools use IPsec for encryption, and others rely on other SSL or other encryption techniques. Microsoft systems used to provide VPN tunneling through the Point-to-Point Tunneling Protocol (which is derived from the PPP modem protocol). More recent Microsoft systems use the Layer 2 Tunneling Protocol (L2TP) for VPN sessions.


The encryption techniques described earlier in this hour do not work well if every router in the delivery chain needs knowledge of the encryption key. Encryption is intended for point-to-point connections. The idea is that the VPN client software on the remote server establishes a connection with a VPN server that is acting as a gateway to the network (see Figure 11.17). The VPN client and server exchange plain, routable TCP/IP datagrams that pass normally through the Internet. However, the payload (the data) sent through the VPN connection is actually an encrypted datagram. The encrypted datagrams (which are unreadable on the open Internet) are enclosed in the plain, readable datagrams forwarded to the VPN server. The VPN server software then extracts the encrypted datagram, decrypts the datagram using the encryption key, and forwards the enclosed data to its destination address on the protected network.

Figure 11.17. A VPN provides a private tunnel through a public network.

[View full size image]


Although it is possible for an eavesdropping cyber thief to intercept a nonencrypted packet sent between the VPN client and server, the useful information is all within the encrypted payload, which the listener cannot unencrypt without the necessary key.

With the arrival of VPNs, it is now common for users to establish secure LAN-like connections with remote networks over the Internet. On most systems, the details of establishing and maintaining a VPN connection are handled within the software. The user just has to start the VPN application and enter authentication information. After the connection is established, the user interacts with the network as if connected locally.

Kerberos
Kerberos is a network-based authentication and access control system designed to support secure access over hostile networks. Kerberos was developed at MIT as part of the Athena project. The Kerberos system was originally intended for UNIX-based systems, but it has since been ported to other environments. Microsoft provides a version of Kerberos for Windows networks.

As you have probably figured out by now, the short answer to the question of secure communication on hostile networks is encryption. The long answer is providing a means for protecting the security of the encryption keys. Kerberos offers a methodical process for distributing keys to the communicating hosts and verifying the credentials of a client requesting access to a service.

The Kerberos system uses a server called the Key Distribution Center (KDC) to manage the key distribution process. The Kerberos authentication process results from a relationship of three entities:

The client: A computer requesting access to a server

The server: A computer offering a service on the network

The KDC: A computer designated to provide keys for network communication

The Kerberos authentication process is shown in Figure 11.18. Note that this process presupposes that the KDC already has a shared secret key it can use to communicate with the client and a shared secret key it can use to communicate with the server. These keys are used to encrypt a new session key, which the client and server will use to communicate with each other. The separate keys used by the KDC to encrypt data for the client and server are called long-term keys. The long-term key is typically derived from a secret shared by the KDC and the other computer. Commonly, the client long-term key is derived from a hash of the user¡¯s logon password, which is known to both the client and the KDC.

Figure 11.18. The Kerberos authentication process.

[View full size image]


The process is as follows. As you read through this process, keep in mind that Kerberos normally uses conventional (symmetric) encryption rather than public key (asymmetric) encryption. In other words, the same key is used at both ends of each exchange:

1.
The client wants to access a service on Server A. The client sends the KDC a request for access to the service on Server A. (In some cases, the client has already undergone an authentication process and received a separate session key for encrypting communication with the ticket granting service on the KDC.)

2.
The KDC performs the following steps:

The KDC generates a session key that will be used to encrypt communication between the client and Server A.
The KDC creates a session ticket. The session ticket includes a copy of the session key generated in step 2a. The ticket also contains time stamp information and information about the client that is requesting access, such as client security settings.
The KDC encrypts the session ticket using Server A¡¯s long-term key.
The KDC bundles the encrypted session ticket, a copy of the session key, and other response parameters for the client and encrypts the whole package using the client¡¯s key. The response is then sent to the client.
3.
The client receives the response from the KDC and decrypts it. The client obtains the session key necessary for communicating with Server A. Also included in the package is the session ticket, which is encrypted with the server¡¯s long-term key. The client cannot read the session ticket, but it knows it must send the ticket to the server to be authenticated. The client creates an authenticator (a string of authentication parameters) and encrypts it with the session key.

4.
The client sends Server A an access request. The request includes the session ticket (encrypted with the server¡¯s long-term key) and the authenticator (encrypted with the session key). The authenticator includes the user¡¯s name, network address, time stamp information, and so forth.

5.
Server A receives the request. Server A uses its long-term key to decrypt the session ticket (see step 2c). Server A extracts the session key from the session ticket and uses the session key to decrypt the authenticator. Server A verifies that the information in the authenticator matches the information included in the session ticket. If so, access to the service is granted.

6.
As an optional final step, if the client wants to verify the credentials of Server A, Server A encrypts an authenticator with the session key and returns this authenticator to the client.

The Kerberos system is gradually becoming more popular as a means of providing a unified logon system for a network. Kerberos 4 used DES encryption, which, as this hour has already noted, is considered unsecure by many encryption experts. The latest version of Kerberos (Kerberos 5¡ªdescribed in RFC 41201510) supports AES and other encryption types.

By the Way: Three Heads?

If you¡¯ve ever read a description of Kerberos, you probably know the standard description of where Kerberos got its name. In Greek mythology, Kerberos (also called Cerberus) is a three-headed hound that guards the gates of the underworld. The story now is that the three heads are the three elements of the Kerberos authentication process (the client, the server, and the KDC). The original intent for the name, however, is a little murkier. In his book Network Security Essentials, Fourth Edition (Prentice Hall, 2010), William Stallings points out that the Kerberos system was originally intended to guard the gates of the network with the three heads of authentication, accounting, and audit, but the latter two heads (accounting and audit) were never implemented. The security community apparently found it easier to realign the metaphor than to rename the protocol for an equivalent one-headed canine.


