主题：java web 典型的面试题目，都来试试吧

http://www.iteye.com/topic/1127254

1、说说 tomcat 或你了解的 web 容器的实现原理。 

2、在浏览器地址栏输入网址回车后，一直到看到完整页面，大概说说都发生了什么事情。 

3、不用第三方，怎么在页面中实现一个带进度条的文件上传？多文件上传呢？ 

4、怎么用原生的js, css, html实现一个无限级树菜单？ 

5、怎么实现一个最简单的 ORM，不考虑缓存。 

6、怎么封装servlet/jsp，实现一个最简单的MVC框架？


--------------------------------------------------------
1 tomcat的核心大概就两条，对外实现html协议，对内实现Servlet规范。 
2 实际上也是http协议，发送http请求,服务器收到请求后处理，返回HTML请求，最后浏览器解析。其中传送的内容全部是字符串。 
3-4 不懂，对前端不太会。 
5 最简单的ORM无非就是一个类到表字段的映射,可以考虑用配置文件或者注解，甚至使用约定，然后用JDBC查询的时候将返回的内容按配置或约定写入类中即可。 
6 MVC框架干的事情多了，不过我觉得如果要说最核心而且容易实现的就是浏览地址到JAVA方法的映射。这个可以写一个核心servlet类，然后讲所有请求都发送到这个核心servlet类,然后再根据具体的请求地址，使用反射执行真正你想执行的方法。具体反射的方式也可以使用配置文件或注解，甚至约定。 

--------------------------------------------------------
第4个是利用html的ul和li标签的动态生成与隐藏

--------------------------------------------------------
.前面三个不会  后面2个简单说下，引高手出马..
5.通过XML配置，解析后利用反射进行创建对象，摄值等操作。这应该也是ORM最基本的原理吧。
6.配置一个核心SERVLET作为控制器,负责页面到服务器的交互中枢，利用javabean负责接收存储数据，以及利用JSP页面作输入与展现。

--------------------------------------------------------
第三个绝对是难题，我个人觉得不用第三方，最主要困难的地方是如何将上传进度实时传到页面上来，这个真心觉得难度很大

以前搞过这么个例子，将上传的进度信息存到session中（不断更新），然后在页面每隔一秒的时间获取这个信息（ajax）,然后在页面上显示，直到完成。 
这个是初学的例子，没有测试过效率什么的。 
这个例子统计信息都在服务器完成，感觉服务器的压力很大，我想一般网站不会这么搞，最好的办法是在客户端做这些统计。 
期待达人！ 

--------------------------------------------------------
HTML5 XMLHttpRequest对象可以监听上传比例的 哈哈 

这个靠谱。 
不支持html5的可以用iframe, ajax 定时查询上传到服务器端的文件大小。 
--------------------------------------------------------
可以用Flex做一个简单的控件，通过Flex实现文件上传，在Flex中可以得到文件上传的进度，在进度更新的时候通过调用js方面更新页面上的进度条就可以了。
--------------------------------------------------------
文件上传 我简单的想下 

html页面上就是个简单的标签，界面操作时会让用户选择文件。submit时，http请求中传的数据和其他表格没什么大区别。 
数据到了服务器端，对servlet而言，需要有个io调用来读取，自己封装ServletInputStream(大概是这样)，然后读到多少字节记下来放到session中，总长度好像也可以从请求头中获得 
web页面隔几秒来调一下取这个值 

http://www.ietf.org/rfc/rfc1867.txt 
http://www.codeguru.com/csharp/.net/net_asp/article.php/c19555/Understanding-File-Upload.htm 

--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
