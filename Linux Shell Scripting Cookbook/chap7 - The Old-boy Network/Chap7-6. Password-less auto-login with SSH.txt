Password-less auto-login with SSH


SSH is widely used with automation scripting. By using SSH, it is possible to remotely execute commands at remote hosts and read their output. SSH is authenticated by using username and password. Passwords are prompted during the execution of SSH commands. But in automation scripts, SSH commands may be executed hundreds of times in a loop and hence providing passwords each time is impractical. Hence we need to automate logins. SSH has a built-in feature by which SSH can auto-login using SSH keys. This recipe describes how to create SSH keys and facilitate auto-login. 

How to do it...
The SSH uses public key-based and private key-based encryption techniques for automatic authentication. An authentication key has two elements: a public key and a private key pair. We can create an authentication key using the ssh-keygen command. For automating the authentication, the public key must be placed at the server (by appending the public key to the ~/.ssh/authorized_keys file) and its private key file of the pair should be present at the ~/.ssh directory of the user at client machine, which is the computer you are logging in from. Several configurations (for example, path and name of the authorized_keys file) regarding the SSH can be configured by altering the configuration file /etc/ssh/sshd_config. 

There are two steps towards the setup of automatic authentication with SSH. They are:

1. Creating the SSH key from the machine, which requires a login to a remote machine.

2. Transferring the public key generated to the remote host and appending it to ~/.ssh/authorized_keys file.

In order to create an SSH key, enter the ssh-keygen command with the encryption algorithm type specified as RSA as follows:

Code View: Scroll / Show All
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/slynux/.ssh/id_rsa):
Created directory '/home/slynux/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/slynux/.ssh/id_rsa.
Your public key has been saved in /home/slynux/.ssh/id_rsa.pub.
The key fingerprint is:
f7:17:c6:4d:c9:ee:17:00:af:0f:b3:27:a6:9c:0a:05slynux@slynux-laptop
The key's randomart image is:
+--[ RSA 2048]----+
| . |
| o . .|
| E o o.|
| ...oo |
| .S .+ +o.|
| . . .=....|
| .+.o...|
| . . + o. .|
| ..+ |
+-----------------+


					  

You need to enter a passphrase for generating the public-private key pair. It is also possible to generate the key pair without entering a passphrase, but it is insecure. We can write monitoring scripts that use automated login from the script to several machines. In such cases, you should leave the passphrase empty while running the ssh-keygen command to prevent the script from asking for a passphrase while running.

Now ~/.ssh/id_rsa.pub and ~/.ssh/id_rsa has been generated. id_dsa.pub is the generated public key and id_dsa is the private key. The public key has to be appended to the ~/.ssh/authorized_keys file on remote servers where we need to auto-login from the current host. 

In order to append a key file, use:

$ ssh USER@REMOTE_HOST "cat >> ~/.ssh/authorized_keys" < ~/.ssh/id_rsa.pub
Password:


Provide the login password in the previous command.

The auto-login has been set up. From now on, SSH will not prompt for passwords during execution. You can test this with the following command:

$ ssh USER@REMOTE_HOST uname
Linux


You will not be prompted for a password.


