Finding difference between files, patching


When multiple versions of a file are available, it is very useful when we can find the differences between files being highlighted rather than comparing two files manually by looking through them. If the files are of 1000s of lines, they are practically very difficult and time consuming to compare. This recipe illustrates how to generate differences between files highlighted with line numbers. When working on large files by multiple developers, when one of them has made changes and these changes need to be shown to the other, sending the entire source code to other developers is costly in consumption of space and time to manually check the changes. Sending a different file is helpful. It consists of only lines that are changed, added, or removed and line numbers are attached with it. This difference file is called a patch file. We can add the changes specified in the patch file to the original source code by using the patch command. We can also revert the changes by patching again. Let's see how to do this. 

How to do it...
The diff command utility is used to generate difference files. 

In order to generate difference information, create the following files:

File 1: version1.txt 

this is the original text
line2
line3
line4
happy hacking !
File 2: version2.txt 

this is the original text
line2
line4
happy hacking !
GNU is not UNIX
Non-unified diff output (without the u flag) will be as follows:

$ diff version1.txt version2.txt
3d2
<line3
6c5
> GNU is not UNIX


The unified diff output will be as follows::

$ diff -u version1.txt version2.txt
--- version1.txt 2010-06-27 10:26:54.384884455 +0530
+++ version2.txt 2010-06-27 10:27:28.782140889 +0530
@@ -1,5 +1,5 @@
this is the original text
line2
-line3
line4
happy hacking !
-
+GNU is not UNIX


The -u option is used to produce unified output. Everyone prefers unified output, as the unified output is more readable and because it is easier to interpret the difference that is being made between two files.

In unified diff, the lines starting with + are the newly added lines and the lines starting with are the removed lines.

A patch file can be generated by redirecting the diff output to a file, as follows:

$ diff -u version1.txt version2.txt > version.patch


Now using the patch command we can apply changes to any of the two files. When applied to version1.txt, we get version2.txt file. When applied to version2.txt, we receive version1.txt.

Apply the patch by using the following command: 

$ patch -p1 version1.txt < version.patch
patching file version1.txt


We now have version1.txt with the same contents as that of version2.txt.

In order to revert the changes back, use the following command:

$ patch -p1 version1.txt < version.patch
patching file version1.txt
Reversed (or previously applied) patch detected! Assume -R? [n] y
#Changes are reverted.


Revert the changes without prompting the user with y/n by using the R option along with the patch command.

There's more...
Let's go through additional features available with diff.

Generating diff against directories
The diff command can also act recursively against directories. It will generate a difference output for all the descendant files in the directories. 

Use the following command:

$ diff -Naur directory1 directory2


The interpretation of each of the above options is as follows:

-N is for treating absent files as empty

-a is to consider all files as text files

-u is to produce unified output

-r is to recursively traverse through the files in the directories


