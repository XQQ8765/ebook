Cryptographic tools and hashes


Encryption techniques are used mainly to protect data from unauthorized access. There are many algorithms available and we use a common set of standard algorithms. There are a few tools available in a Linux environment for performing encryption and decryption. Sometimes we use encryption algorithm hashes for verifying data integrity. This section will introduce a few commonly-used cryptographic tools and a general set of algorithms that these tools can handle. 

How to do it...
Let's see how to use the tools such as crypt, gpg, base64, md5sum, sha1sum, and openssl:

crypt 

The crypt command is a simple cryptographic utility, which takes a file from stdin and a passphrase as input and outputs encrypted data into stdout. 

$ crypt <input_file> output_file
Enter passphrase:



It will interactively ask for a passphrase. We can also provide a passphrase through command-line arguments. 


$ crypt PASSPHRASE < input_file > encrypted_file



In order to decrypt the file use: 


$ crypt PASSPHRASE -d < encrypted_file > output_file


gpg (GNU privacy guard) 

gpg (GNU privacy guard) is a widely-used encryption scheme used for protecting files with key signing techniques that enables to access data by authentic destination only. gpg signatures are very famous. The details of gpg are outside the scope of this book. Here we can learn how to encrypt and decrypt a file. 

In order to encrypt a file with gpg use: 

$ gpg -c filename



This command reads the passphrase interactively and generates filename.gpg. 

In order to decrypt a gpg file use: 


$ gpg filename.gpg



This command reads a passphrase and decrypts the file. 



Base64 

Base64 is a group of similar encoding schemes that represents binary data in an ASCII string format by translating it into a radix-64 representation. The base64 command can be used to encode and decode the Base64 string. 

In order to encode a binary file into Base64 format, use: 


$ base64 filename > outputfile



Or: 


$ cat file | base64 > outputfile



It can read from stdin. 

Decode Base64 data as follows: 


$ base64 -d file > outputfile



Or: 


$ cat base64_file | base64 -d > outputfile


md5sum and sha1sum 

md5sum? and sha1sum?? are unidirectional hash algorithms, which cannot be reversed to form the original data. These are usually used to verify the integrity of data or for generating a unique key from a given data. For every file it generates a unique key by analyzing its content. 

$ md5sum file
8503063d5488c3080d4800ff50850dc9 file
$ sha1sum file
1ba02b66e2e557fede8f61b7df282cd0a27b816b file



These types of hashes are ideal for storing passwords. Passwords are stored as its hashes. When a user wants to authenticate, the password is read and converted to the hash. Then hash is compared to the one that is stored already. If they are same, the password is authenticated and access is provided, else it is denied. Storing original password strings is risky and poses a security risk of exposing the password. 



Shadowlike hash (salted hash) 

Let's see how to generate shadow like salted hash for passwords. 

The user passwords in Linux are stored as its hashes in the /etc/shadow file. A typical line in /etc/shadow will look like this: 

Code View: Scroll / Show All
test:$6$fG4eWdUi$ohTKOlEUzNk77.4S8MrYe07NTRV4M3LrJnZP9p.qc1bR5c.EcOruzPXfEu1uloBFUa18ENRH7F70zhodas3cR.:14790:0:99999:7:::


					  

In this line $6$fG4eWdUi$ohTKOlEUzNk77.4S8MrYe07NTRV4M3LrJnZP9p.qc1bR5c.EcOruzPXfEu1uloBFUa18ENRH7F70zhodas3cR is the shadow hash corresponding to its password. 

In some situations, we may need to write critical administration scripts that may need to edit passwords or add users manually using a shell script. In that case we have to generate a shadow password string and write a similar line as above to the shadow file. Let's see how to generate a shadow password using openssl. 

Shadow passwords are usually salted passwords. SALT is an extra string used to obfuscate and make the encryption stronger. The salt consists of random bits that are used as one of the inputs to a key derivation function that generates the salted hash for the password. 

For more details on salt, see the Wikipedia page http://en.wikipedia.org/wiki/Salt_(cryptography). 


$ openssl passwd -1 -salt SALT_STRING PASSWORD
$1$SALT_STRING$323VkWkSLHuhbt1zkSsUG.



Replace SALT_STRING with a random string and PASSWORD with the password you want to use. 



