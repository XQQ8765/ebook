Recording and playback of terminal sessions


When you need to show somebody how to do something in the terminal or you need to prepare a tutorial on how to do something through command line, you would normally type the commands manually and show them. Or you could record a screencast video and playback the video to them. What if we can record the order and timing of the commands that we typed before and replay these commands again so that others can watch as if they were typing? The output of the commands gets displayed on the terminal until the playback is complete. Sounds interesting? It can be done using the commands script and scriptreplay.

Getting ready
script and scriptreplay commands are available in most of the GNU/Linux distributions. Recording the terminal sessions to a file will be interesting. You can create tutorials of command-line hacks and tricks to achieve some task by recording the terminal sessions. You can also share the recorded files for others to playback and see how to perform a particular task using the command line. 

How to do it...
We can start recording the terminal session as follows: 

$ script -t 2> timing.log -a output.session
type commands;
…
..
exit


Two configuration files are passed to the script command as arguments. One file is for storing timing information (timing.log) at which each of the commands are run, whereas the other file (output.session) is used for storing command output. The -t flag is used to dump timing data to stderr. 2> is used to redirect stderr to timing.log.

By using the two files, timing.log (stores timing information) and output.session (stores command output information), we can replay the sequence of command execution as follows:

$ scriptreplay timing.log output.session
# Plays the sequence of commands and output


How it works...
Usually, we record the desktop video to prepare tutorials. However, videos require good amount of storage. But a terminal script file is just a text file. Therefore, it always has a file size only in the order of Kilobytes.

You can share the files timing.log and output.session with anyone who wants to replay a terminal session in their terminal.

The script command can also be used to set up a terminal session that can be broadcasted to multiple users. It is a very interesting experience. Let's see how to do it. 

Open two terminals, Terminal1 and Terminal2.

1. In Terminal1 enter the following command:

$ mkfifo scriptfifo


2. In Terminal2 enter the following command:

$ cat scriptfifo


3. Go back to Terminal1 and enter the following command:

$ script -f scriptfifo
$ commands;


When you need to end the session, type exit and press Return. It will show the message "Script done, file is scriptfifo".

Now Terminal1 is the broadcaster and Terminal2 is the receiver.

When you type anything in real-time on Terminal1, it will be played on Terminal2 or any terminal that supplies the following command:

cat scriptfifo


This method can be used when handling a tutorial session for many users in a computer lab or over the Internet. It will save bandwidth as well as provide a real-time experience.
